function s:Quote()
    let pos = getpos(".")
    execute ":normal i"
        \ . "<figure><blockquote><p></p></blockquote>"
        \ . "<footer>&mdash; <cite></cite>, <cite></cite>"
        \ . "</footer></figure>"
    call setpos(".", pos)
endfunction
command Quote call Quote()

function s:do_exctags() abort
    let tag = '.tags'
    let path = findfile(tag, '.;')

    if path ==# ''
        return
    endif

    let tag_directory = fnamemodify(path, ':p:h')
    execute 'silent !cd ' tag_directory '&& exctags -R -f ' tag ' 2> /dev/null &'
endfunction

" Magic
if &compatible
    set nocompatible
endif

" Fix ESC Delay in CUI
if !has('gui_running')
    set timeout timeoutlen=1000 ttimeoutlen=50
endif

" Enable Backspace Key
set backspace=indent,eol,start

" Vim Layout
set shortmess+=I
set hidden
set number
set title
set showcmd
set cmdheight=2
set showmatch
set matchtime=1
set ambiwidth=double
set pumheight=5
set colorcolumn=80
set cursorline
hi clear CursorLine
set vb t_vb=
set formatoptions+=mMj

" Vim Command
set wildmenu
set wildmode=list:longest,full
set history=1000

" Status Line Layout
set laststatus=2
set statusline=
set statusline+=%5*%{&ff}%*
set statusline+=%4*\ %<%F%*
set statusline+=%2*\ %y
set statusline+=%3*\ %{''.(&fenc!=''?&fenc:&enc).''}
set statusline+=%2*%m%*
set statusline+=%8*\ %=\ row:%l/%L\ (%03p%%)
set statusline+=%1*%4v\ %*

" Tab and Indent Configure
set autoindent
set smartindent

" Search Configure
set wrapscan
set hlsearch
set wildmenu
set nostartofline
set ignorecase
set smartcase

" No Backup
set nobackup
set noswapfile

" Encoding Configure
set termencoding=utf-8
set encoding=utf-8
set fileformats=unix,mac,dos
set fileencoding=utf-8
set fileencodings=utf-8,shift-jis,euc-jp

""
" How to Install Vundle (https://github.com/VundleVim/Vundle.vim.git)
"     1. Clone Vundle.vim to $HOME/.vim/bundle
"         $ git clone https://github.com/VundleVim/Vundle.vim.git \
"         > $HOME/.vim/bundle/Vundle.vim
"     2. Run the following command on vim.
"         :PluginInstall
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle is short for Vim bundle and is a Vim plugin manager.
Plugin 'VundleVim/Vundle.vim'

" gruvbox is heavily inspired by badwolf, jellybeans and solarized.
"
" Designed as a bright theme with pastel 'retro groove' colors and light/dark
" mode switching in the way of solarized. The main focus when developing
" gruvbox is to keep colors easily distinguishable, contrast enough and still 
" pleasant for the eyes.
Plugin 'morhetz/gruvbox'

" A Vim plugin which shows a git diff in the gutter (sign column) and
" stages/undoes hunks and partial hunks.
Plugin 'airblade/vim-gitgutter'
let g:gitgutter_highlight_lines = 1
let g:gitgutter_git_executable = '/usr/local/bin/git'
let g:gitgutter_highlight_lines = 0
set updatetime=100

" vim-bracketed-paste enables transparent pasting into vim.
" (i.e. no more :set paste!)
Plugin 'ConradIrwin/vim-bracketed-paste'

" vim match-up: even better %
Plugin 'andymass/vim-matchup'

" ALE (Asynchronous Lint Engine) is a plugin providing linting (syntax
" checking and semantic errors) in NeoVim 0.2.0+ and Vim 8 while you edit your
" text files, and acts as a Vim Language Server Protocol client.
Plugin 'dense-analysis/ale'

" Surround.vim is all about "surroundings": parentheses, brackets, quotes, XML
" tags, and more. The plugin provides mappings to easily delete, change and
" add such surroundings in pairs.
Plugin 'tpope/vim-surround'

" VimWiki is a personal wiki for Vim
" -- a number of linked text files that have their own syntax highlighting.
Plugin 'vimwiki/vimwiki'
let g:vimwiki_ext2syntax = {
    \ '.md': 'markdown',
    \ '.markdown': 'markdown',
    \ '.mdown': 'markdown'
    \ }
let g:vimwiki_list = [
        \ {
            \ 'path': '~/src/github.com/user340/wiki/',
            \ 'syntax': 'markdown',
            \ 'ext': 'md'
        \ }
    \ ]

" A vim 7.4+ plugin to generate table of contents for Markdown files.
Plugin 'mzlogin/vim-markdown-toc'

" Distraction-free writing in Vim
Plugin 'junegunn/goyo.vim'
autocmd! User GoyoLeave nested q
nmap \g :Goyo<CR>

" Auto close (X)HTML tags
Plugin 'alvan/vim-closetag'
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'
let g:closetag_filetypes = 'html,xhtml,phtml'
let g:closetag_xhtml_filetypes = 'xhtml,jsx'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_regions = {
    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
    \ 'javascript.jsx': 'jsxRegion',
    \ }
let g:closetag_shortcut = '>'
let g:closetag_close_shortcut = '<leader>>'

" Go development plugin for Vim https://www.patreon.com/bhcleek
Plugin 'fatih/vim-go'
let g:go_fmt_commnad = "goimports"
let g:go_def_mapping_enabled = 0
let g:go_doc_keywordprg_enabled = 0

" Async autocompletion for Vim 8 and Neovim with |timers|.
Plugin 'prabirshrestha/asyncomplete.vim'
" {{{ BEGIN asyncomplete requires
" normalize async job control api for vim and neovim
Plugin 'prabirshrestha/async.vim'
" Async Language Server Protocol plugin for vim8 and neovim.
Plugin 'prabirshrestha/vim-lsp'
" Provide Language Server Protocol autocompletion source 
" for asyncomplete.vim and vim-lsp.
Plugin 'prabirshrestha/asyncomplete-lsp.vim'
" }}} END asyncomplete requires

" Provide buffer autocompletion source for asyncomplete.vim
Plugin 'prabirshrestha/asyncomplete-buffer.vim'

" Filename completion source for asyncomplete.vim
Plugin 'prabirshrestha/asyncomplete-file.vim'

" Vim plugin for insert mode completion of words in adjacent tmux panes
Plugin 'wellle/tmux-complete.vim'

" Omni completion source for asyncomplete.vim
Plugin 'yami-beta/asyncomplete-omni.vim'

" A vim plugin for communicating with a language server
Plugin 'natebosch/vim-lsc'

" LSP settings for each languages
if executable('pyls')
    " It requries command that `pip install python-language-server`
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif
if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'whitelist': ['c'],
        \ })
endif
if executable('golsp')
  augroup LspGo
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'go-lang',
        \ 'cmd': {server_info->['golsp', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd FileType go setlocal omnifunc=lsp#complete
  augroup END
endif
if executable('bash-language-server')
  au User lsp_setup call lsp#register_server({
        \ 'name': 'bash-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'bash-language-server start']},
        \ 'whitelist': ['sh'],
        \ })
endif
let g:lsp_diagnostics_enabled = 0

call vundle#end()

" Setting of prabirshrestha/asyncomplete-buffer.vim
call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'whitelist': ['*'],
    \ 'blacklist': ['go'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ 'config': {
    \   'max_buffer_size': 5000000,
    \ },
    \ }))
let g:asyncomplete_buffer_clear_cache = 1  " Clear buffer word cache on events (default: 1)
" Setting of prabirshrestha/asyncomplete-file.vim
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'whitelist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))
" Setting of yami-beta/asyncomplete-omni.vim
call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
    \ 'name': 'omni',
    \ 'whitelist': ['*'],
    \ 'blacklist': ['c', 'cpp', 'html'],
    \ 'completor': function('asyncomplete#sources#omni#completor')
    \  }))
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

filetype plugin indent on
syntax on

" Color Scheme Configuration
set background=dark
colorscheme gruvbox
highlight Normal ctermbg=none
highlight NonText ctermbg=none
highlight LineNr ctermbg=none
highlight Folded ctermbg=none
highlight EndOfBuffer ctermbg=none 

""
" Custom Key Binding
"
" In Insert Mode
inoremap <c-e> <Esc>$a
inoremap <c-a> <Esc>^i
inoremap <c-h> <Left>
inoremap <c-j> <DOWN>
inoremap <c-k> <UP>
inoremap <c-l> <Right>

" In Normal Mode
nnoremap <C-c><C-c> :<C-u>nohlsearch<cr><Esc>
nnoremap + <C-a>
nnoremap - <C-x>
nnoremap k gk
nnoremap j gj
nnoremap <UP> gk
nnoremap <DOWN> gj
noremap!  
nnoremap Y y$
nnoremap <CR> o<Esc>
nnoremap <Space> i<Space><Esc>

" LSP shortcut settings
nnoremap tj :LspDefinition<cr>

autocmd BufNewFile,BufRead ~/.mutt/tmp/neomutt-* set textwidth=64 colorcolumn=64
autocmd BufNewFile,BufRead *.txt set textwidth=64 colorcolumn=64

let extension = expand("%:e")
if extension == 'c' || extension == 'go'
    set tabstop=8
    set softtabstop=8
    set shiftwidth=8
elseif extension == 'html' || extension == 'css' || extension == 'bib' || extension == 'tex'
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2
    set expandtab
else
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4
    set expandtab
endif

set tags=.tags
augroup ctags
    autocmd!
    autocmd BufWritePost * call s:do_exctags()
augroup END
